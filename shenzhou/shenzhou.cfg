# -*- python -*-
# ex: set syntax=python:

import os
def sibpath(f):
    d, f2 = os.path.split(__file__)
    return os.path.join(d, f)


c['slavePortnum'] = "8081"
c['projectName'] = "Shenzhou Package Builder"
c['projectURL'] = "http://github.com/Jc2k/shenzhou"
c['buildbotURL'] = "http://localhost:8080/"


#
# Libvirt configuration
#
from buildbot.libvirtbuildslave import LibVirtSlave
from buildbot.libvirtbuildslave import Connection

connection = Connection("qemu:///system")
xml_template = open(sibpath("shenzhou-vm.xml"), "r").read()

for host, macaddr in (("minion1", "00:16:3e:77:e2:01"), ("minion2", "00:16:3e:77:e2:02")):
    xml = xml_template % {
        "name": host,
        "hd_image": os.path.realpath(os.path.join(config.VM_DIR, host)),
        "macaddr": macaddr,
        }
    slave = LibVirtSlave(host, "password", connection, os.path.realpath(os.path.join(config.VM_DIR, host)),
                         base_image=os.path.realpath(config.VM_BASE), xml=xml, max_builds=1)
    c['slaves'].append(slave)


#
# Be able to build a package from Git
#


from buildbot.process import factory
from buildbot.process.properties import WithProperties
from buildbot.steps.shell import ShellCommand
from buildbot.steps.shell import SetProperty
from buildbot.steps.transfer import DirectoryUpload
from buildbot.steps.master import MasterShellCommand


f = factory.BuildFactory()

# The built-in git support is a bit poor for our needs - it doesnt
# get all the branches and tags we need - so do this instead:
f.addStep(ShellCommand(command=["git", "clone", WithProperties("%(repourl)s"), "."],
    name="git", description="git", haltOnFailure=True))
f.addStep(ShellCommand(command=["git", "reset", "--hard", WithProperties("%(branch)s")],
    name="checkout", description="checkout", haltOnFailure=True))
f.addStep(SetProperty(command="git rev-parse HEAD", property="got_revision", haltOnFailure=True))

# Satisfy build dependencies
f.addStep(ShellCommand(command="sudo /usr/lib/pbuilder/pbuilder-satisfydepends",
    name="satisfy-deps", description="satisfy-deps", haltOnFailure=True))

# Build the package
f.addStep(ShellCommand(command="git buildpackage --git-ignore-new -us -uc -sa",
    name="build", description="build", haltOnFailure=True))

# Get information about the packages we built
cmd = "sh -c 'for x in *.deb; do echo $x; dpkg --info $x; dpkg --contents $x; echo \\n\\n\\n; done;'"
f.addStep(ShellCommand(command=cmd, name="get-info", description="get-info", workdir="."))

# The DirectoryUpload step doesnt have any kind of filtering - move the files we want into their
# own directory...
f.addStep(ShellCommand(command="mkdir output; mv *.deb *.build *.gz *.dsc *.changes output/",
    name="sieve", description="sieve", workdir=".", haltOnFailure=True))

# Transfer output to master
f.addStep(DirectoryUpload(slavesrc="output", masterdest=os.path.join(config.REPO_BASE, "incoming"),
     name="push", workdir=".", haltOnFailure=True))

# Update reprepro
f.addStep(MasterShellCommand(command="reprepro -V -b %s processincoming incoming" % config.REPO_BASE,
    name="publish", description="publish", haltOnFailure=True))

builder = {
    "name": "builder",
    "slavenames": ["minion1", "minion2"],
    "factory": f,
    "properties": {
        "repourl": "git://github.com/Jc2k/hello.git",
        "branch": "HEAD",
        }
    }
c['builders'].append(builder)


#
# Basic scheduler, so we can build packages from GitHub commit hooks...
#

from buildbot.scheduler import Scheduler
c['schedulers'].append(Scheduler(name="builder", builderNames =["builder"]))


#
# WebStatus view for playing around with this...
#
from buildbot.status import html
c['status'].append(html.WebStatus(http_port="8080", allowForce=True, public_html=os.path.realpath(config.HTML_DIR)))

